<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<title>M3Explorer: libm3_xml_driver.h Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.5.5 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="annotated.html"><span>Data&nbsp;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
<h1>libm3_xml_driver.h</h1><a href="libm3__xml__driver_8h.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* @M3EXPLORER_LICENSE_START@</span>
<a name="l00002"></a>00002 <span class="comment"> *</span>
<a name="l00003"></a>00003 <span class="comment"> * This file is part of the Multicube Explorer tool.</span>
<a name="l00004"></a>00004 <span class="comment"> *</span>
<a name="l00005"></a>00005 <span class="comment"> * Authors: Vittorio Zaccaria, Gianluca Palermo, Giovanni Mariani, Fabrizio Castro, Alessandro Sivieri (2008)</span>
<a name="l00006"></a>00006 <span class="comment"> * Copyright (c) 2008-2009, Politecnico di Milano, Universita' della Svizzera italiana</span>
<a name="l00007"></a>00007 <span class="comment"> * All rights reserved.</span>
<a name="l00008"></a>00008 <span class="comment"> * </span>
<a name="l00009"></a>00009 <span class="comment"> * Redistribution and use in source and binary forms, with or without modification, </span>
<a name="l00010"></a>00010 <span class="comment"> * are permitted provided that the following conditions are met:</span>
<a name="l00011"></a>00011 <span class="comment"> * </span>
<a name="l00012"></a>00012 <span class="comment"> *  * Redistributions of source code must retain the above copyright notice, </span>
<a name="l00013"></a>00013 <span class="comment"> *    this list of conditions and the following disclaimer.</span>
<a name="l00014"></a>00014 <span class="comment"> * </span>
<a name="l00015"></a>00015 <span class="comment"> *  * Redistributions in binary form must reproduce the above copyright notice, </span>
<a name="l00016"></a>00016 <span class="comment"> *    this list of conditions and the following disclaimer in the documentation </span>
<a name="l00017"></a>00017 <span class="comment"> *    and/or other materials provided with the distribution.</span>
<a name="l00018"></a>00018 <span class="comment"> * </span>
<a name="l00019"></a>00019 <span class="comment"> * Neither the name of Politecnico di Milano nor Universita' della Svizzera Italiana </span>
<a name="l00020"></a>00020 <span class="comment"> * nor the names of its contributors may be used to endorse or promote products </span>
<a name="l00021"></a>00021 <span class="comment"> * derived from this software without specific prior written permission.</span>
<a name="l00022"></a>00022 <span class="comment"> * </span>
<a name="l00023"></a>00023 <span class="comment"> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" </span>
<a name="l00024"></a>00024 <span class="comment"> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, </span>
<a name="l00025"></a>00025 <span class="comment"> * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR </span>
<a name="l00026"></a>00026 <span class="comment"> * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR </span>
<a name="l00027"></a>00027 <span class="comment"> * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, </span>
<a name="l00028"></a>00028 <span class="comment"> * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, </span>
<a name="l00029"></a>00029 <span class="comment"> * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; </span>
<a name="l00030"></a>00030 <span class="comment"> * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, </span>
<a name="l00031"></a>00031 <span class="comment"> * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) </span>
<a name="l00032"></a>00032 <span class="comment"> * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED </span>
<a name="l00033"></a>00033 <span class="comment"> * OF THE POSSIBILITY OF SUCH DAMAGE.</span>
<a name="l00034"></a>00034 <span class="comment"> *</span>
<a name="l00035"></a>00035 <span class="comment"> * This work was supported by the EC under grant MULTICUBE FP7-216693.</span>
<a name="l00036"></a>00036 <span class="comment"> * </span>
<a name="l00037"></a>00037 <span class="comment"> * @M3EXPLORER_LICENSE_END@ */</span>
<a name="l00038"></a>00038 
<a name="l00039"></a>00039 <span class="comment">/* @additional_authors @, Alessandro Sivieri (2008)@ */</span>
<a name="l00040"></a>00040 
<a name="l00041"></a>00041 <span class="preprocessor">#ifndef LIBM3_XML_DRIVER_H_</span>
<a name="l00042"></a>00042 <span class="preprocessor"></span><span class="preprocessor">#define LIBM3_XML_DRIVER_H_</span>
<a name="l00043"></a>00043 <span class="preprocessor"></span>
<a name="l00044"></a>00044 <span class="preprocessor">#include &lt;cmath&gt;</span>
<a name="l00045"></a>00045 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00046"></a>00046 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00047"></a>00047 <span class="preprocessor">#include &lt;<a class="code" href="m3__driver_8h.html">m3_driver.h</a>&gt;</span>
<a name="l00048"></a>00048 <span class="preprocessor">#include &lt;<a class="code" href="m3__vector_8h.html">m3_vector.h</a>&gt;</span>
<a name="l00049"></a>00049 <span class="preprocessor">#include &lt;<a class="code" href="m3__map_8h.html">m3_map.h</a>&gt;</span>
<a name="l00050"></a>00050 <span class="preprocessor">#include &lt;<a class="code" href="m3__exception_8h.html">m3_exception.h</a>&gt;</span>
<a name="l00051"></a>00051 <span class="preprocessor">#include &lt;<a class="code" href="m3__design__space_8h.html">m3_design_space.h</a>&gt;</span>
<a name="l00052"></a>00052 <span class="comment">/*</span>
<a name="l00053"></a>00053 <span class="comment"> * libxml is a C library, so we have to do this little hack</span>
<a name="l00054"></a>00054 <span class="comment"> * to make it work here, under C++</span>
<a name="l00055"></a>00055 <span class="comment">*/</span>
<a name="l00056"></a>00056 <span class="keyword">extern</span> <span class="stringliteral">"C"</span>
<a name="l00057"></a>00057 {
<a name="l00058"></a>00058 <span class="preprocessor">#include &lt;libxml/parser.h&gt;</span>
<a name="l00059"></a>00059 <span class="preprocessor">#include &lt;libxml/xpath.h&gt;</span>
<a name="l00060"></a>00060 <span class="preprocessor">#include &lt;libxml/xmlschemas.h&gt;</span>
<a name="l00061"></a>00061 }
<a name="l00062"></a>00062 
<a name="l00063"></a>00063 <span class="keyword">using namespace </span>std;
<a name="l00064"></a>00064 
<a name="l00072"></a><a class="code" href="classm3__xml__exception.html">00072</a> <span class="keyword">class </span><a class="code" href="classm3__xml__exception.html" title="This class defines the exception used in all objects of this driver; it accepts only...">m3_xml_exception</a>: <span class="keyword">public</span> <a class="code" href="classm3__exception.html" title="A generic multicube exception.">m3_exception</a>
<a name="l00073"></a>00073 {
<a name="l00074"></a>00074         <span class="keyword">public</span>:
<a name="l00075"></a>00075                 <a class="code" href="classm3__xml__exception.html#2cef40fb1e13d3792c514c1e431f9c52">m3_xml_exception</a>(<span class="keywordtype">string</span>);
<a name="l00076"></a>00076                 <a class="code" href="classm3__xml__exception.html#894c089937b902dfe21de45cf5d77222">~m3_xml_exception</a>() <span class="keywordflow">throw</span>();
<a name="l00077"></a>00077 };
<a name="l00078"></a>00078 
<a name="l00086"></a><a class="code" href="classm3__xml__rule.html">00086</a> <span class="keyword">class </span><a class="code" href="classm3__xml__rule.html" title="A rule represents an XML fragment describing some properties that a point to be simulated...">m3_xml_rule</a>
<a name="l00087"></a>00087 {
<a name="l00088"></a>00088         <span class="keyword">public</span>:
<a name="l00089"></a>00089                 <a class="code" href="classm3__xml__rule.html#e895c622bfc5e84347ba68557aacc20d">m3_xml_rule</a>(xmlNodePtr);
<a name="l00090"></a>00090                 <a class="code" href="classm3__xml__rule.html#0cdf9258b5ee24b3fed74081503f9514">~m3_xml_rule</a>();
<a name="l00091"></a>00091                 xmlNodePtr <a class="code" href="classm3__xml__rule.html#9a90a421932961ffd782b1d80ddfdcc4">get_rule</a>();
<a name="l00092"></a>00092                 <span class="keywordtype">void</span> <a class="code" href="classm3__xml__rule.html#07766f08b1252fc8a69781cba1f79c0e">set_rule</a>(xmlNodePtr);
<a name="l00093"></a>00093                 <span class="keywordtype">bool</span> <a class="code" href="classm3__xml__rule.html#c9c845b624bdd4b921855395e40118d3">validate</a>(<a class="code" href="classm3__point.html" title="The point derived from the object class.">m3_point</a>&amp;) <span class="keywordflow">throw</span>(<a class="code" href="classm3__xml__exception.html" title="This class defines the exception used in all objects of this driver; it accepts only...">m3_xml_exception</a>);
<a name="l00094"></a>00094         
<a name="l00095"></a>00095         <span class="keyword">private</span>:
<a name="l00096"></a><a class="code" href="classm3__xml__rule.html#f3e515a50428b0a208db56c10923f8ad">00096</a>                 xmlNodePtr <a class="code" href="classm3__xml__rule.html#f3e515a50428b0a208db56c10923f8ad">rule</a>;
<a name="l00113"></a>00113                 <a class="code" href="classm3__object.html" title="This class is the root of all the objects created within the shell.">m3_object</a> *<a class="code" href="classm3__xml__rule.html#e699758a2f02cff627aacf415a9fd0f1" title="This is the recursive function which validates a point against a rule; we first check...">parse</a>(xmlNodePtr&amp; node, <a class="code" href="classm3__point.html" title="The point derived from the object class.">m3_point</a>&amp; point) <span class="keywordflow">throw</span>(<a class="code" href="classm3__xml__exception.html" title="This class defines the exception used in all objects of this driver; it accepts only...">m3_xml_exception</a>);
<a name="l00114"></a>00114 };
<a name="l00115"></a>00115 
<a name="l00124"></a><a class="code" href="classm3__xml__io.html">00124</a> <span class="keyword">class </span><a class="code" href="classm3__xml__io.html" title="This abstract class represents a reader/writer for an XML document; read/write methods...">m3_xml_io</a>
<a name="l00125"></a>00125 {
<a name="l00126"></a>00126         <span class="keyword">public</span>:
<a name="l00127"></a>00127                 <span class="keyword">virtual</span> xmlDocPtr <a class="code" href="classm3__xml__io.html#917784e7e5e208648e1749242e757c52">read</a>(<span class="keywordtype">string</span>)=0;
<a name="l00128"></a>00128                 <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classm3__xml__io.html#61ab73994664eb4cee3fb4e7e3f6adc1">write</a>(<span class="keywordtype">string</span>)=0;
<a name="l00129"></a>00129                 xmlXPathObjectPtr <a class="code" href="classm3__xml__io.html#398054153c4a7d5dc018a80dd493fad0">get_nodeset</a>(xmlDocPtr, xmlChar *);
<a name="l00130"></a><a class="code" href="classm3__xml__io.html#d7a33a67c2dc422f3e95c54371c56cb1">00130</a>                 <span class="keyword">static</span> <span class="keywordtype">string</span> <a class="code" href="classm3__xml__io.html#d7a33a67c2dc422f3e95c54371c56cb1">current_version</a>;
<a name="l00131"></a>00131 };
<a name="l00132"></a>00132 
<a name="l00141"></a><a class="code" href="classm3__xml__design__space.html">00141</a> <span class="keyword">class </span><a class="code" href="classm3__xml__design__space.html" title="This is a design space reader/writer; it reads the input document associated and...">m3_xml_design_space</a>: <span class="keyword">public</span> <a class="code" href="classm3__xml__io.html" title="This abstract class represents a reader/writer for an XML document; read/write methods...">m3_xml_io</a>
<a name="l00142"></a>00142 {
<a name="l00143"></a>00143         <span class="keyword">public</span>:
<a name="l00144"></a>00144                 <a class="code" href="classm3__xml__design__space.html#ccab94a21f72bf85ef18e4542be5259f">m3_xml_design_space</a>();
<a name="l00145"></a>00145                 <a class="code" href="classm3__xml__design__space.html#335dd9dc0cf345282f7dc5ca71001d06">~m3_xml_design_space</a>();
<a name="l00146"></a>00146                 xmlDocPtr <a class="code" href="classm3__xml__design__space.html#b879faeb02d12a0bb1f230858fcd8d00">read</a>(<span class="keywordtype">string</span>) <span class="keywordflow">throw</span>(<a class="code" href="classm3__xml__exception.html" title="This class defines the exception used in all objects of this driver; it accepts only...">m3_xml_exception</a>);
<a name="l00147"></a>00147                 <span class="keywordtype">void</span> <a class="code" href="classm3__xml__design__space.html#5bddb1ba71d45185f0a8bad580cb01ae">write</a>(<span class="keywordtype">string</span>) <span class="keywordflow">throw</span>(<a class="code" href="classm3__xml__exception.html" title="This class defines the exception used in all objects of this driver; it accepts only...">m3_xml_exception</a>);
<a name="l00148"></a>00148                 <span class="keywordtype">void</span> <a class="code" href="classm3__xml__design__space.html#5721c11811382f7281f0ab3e797bd8cc">fill</a>(<a class="code" href="classm3__design__space.html" title="This class represents the design space associated to the current use case.">m3_design_space</a> *) <span class="keywordflow">throw</span>(<a class="code" href="classm3__xml__exception.html" title="This class defines the exception used in all objects of this driver; it accepts only...">m3_xml_exception</a>);
<a name="l00149"></a>00149                 vector&lt;m3_xml_rule *&gt; <a class="code" href="classm3__xml__design__space.html#0aa22b3e47a195f3ad34a0d616a9d358">get_rules</a>();
<a name="l00150"></a>00150                 <span class="keywordtype">string</span> <a class="code" href="classm3__xml__design__space.html#c1e320140e7b399b57dea1fb9ef6e9f2">get_simulator</a>();
<a name="l00151"></a>00151                 xmlDocPtr <a class="code" href="classm3__xml__design__space.html#274c26974e2c6768b2c520a95a312712">get_doc</a>();
<a name="l00152"></a>00152                 <span class="keywordtype">void</span> <a class="code" href="classm3__xml__design__space.html#7f5e1d2e4b0766a28c089e72e4bdccbd">set_doc</a>(xmlDocPtr);
<a name="l00153"></a>00153         
<a name="l00154"></a>00154         <span class="keyword">private</span>:
<a name="l00155"></a>00155                 <span class="keywordtype">void</span> <a class="code" href="classm3__xml__design__space.html#3c00b645a8e4be84626090e83b98a991">add_parameter</a>(<a class="code" href="classm3__design__space.html" title="This class represents the design space associated to the current use case.">m3_design_space</a> *, <a class="code" href="classm3__env.html" title="This class represent the environment of m3explorer.">m3_env</a> *, xmlDocPtr, xmlNode *);
<a name="l00156"></a><a class="code" href="classm3__xml__design__space.html#d49221220b9f69b2ea3c00daf71ceb66">00156</a>                 vector&lt;m3_xml_rule *&gt; <a class="code" href="classm3__xml__design__space.html#d49221220b9f69b2ea3c00daf71ceb66">rules</a>;
<a name="l00157"></a><a class="code" href="classm3__xml__design__space.html#f3e98da9535b4e43e547102c98813003">00157</a>                 <span class="keywordtype">string</span> <a class="code" href="classm3__xml__design__space.html#f3e98da9535b4e43e547102c98813003">simulator</a>;
<a name="l00158"></a><a class="code" href="classm3__xml__design__space.html#e33ee995d7c7f527fd03183ac9d6aaaf">00158</a>                 xmlDocPtr <a class="code" href="classm3__xml__design__space.html#e33ee995d7c7f527fd03183ac9d6aaaf">doc</a>;
<a name="l00159"></a>00159 };
<a name="l00160"></a>00160 
<a name="l00170"></a><a class="code" href="classm3__xml__simulator.html">00170</a> <span class="keyword">class </span><a class="code" href="classm3__xml__simulator.html" title="This represents an instance of the simulator; there is no need to create a new object...">m3_xml_simulator</a>: <span class="keyword">public</span> <a class="code" href="classm3__xml__io.html" title="This abstract class represents a reader/writer for an XML document; read/write methods...">m3_xml_io</a>
<a name="l00171"></a>00171 {
<a name="l00172"></a>00172         <span class="keyword">public</span>:
<a name="l00173"></a>00173                 <a class="code" href="classm3__xml__simulator.html#40a67b069e23468833ee6c4d2a4187ed">m3_xml_simulator</a>(<span class="keywordtype">string</span>);
<a name="l00174"></a>00174                 <a class="code" href="classm3__xml__simulator.html#d84e127c6e3686e0dc16bbfe53c63dde">~m3_xml_simulator</a>();
<a name="l00175"></a>00175                 xmlDocPtr <a class="code" href="classm3__xml__simulator.html#71a0e321a74ccc63f2e005fbe8b4f5a6">read</a>(<span class="keywordtype">string</span>) <span class="keywordflow">throw</span>(<a class="code" href="classm3__xml__exception.html" title="This class defines the exception used in all objects of this driver; it accepts only...">m3_xml_exception</a>);
<a name="l00176"></a>00176                 <span class="keywordtype">void</span> <a class="code" href="classm3__xml__simulator.html#8a863d3cc9f31c8eae7a147f8f4c9132">write</a>(<span class="keywordtype">string</span>) <span class="keywordflow">throw</span>(<a class="code" href="classm3__xml__exception.html" title="This class defines the exception used in all objects of this driver; it accepts only...">m3_xml_exception</a>);
<a name="l00203"></a>00203                 <span class="keywordtype">void</span> <a class="code" href="classm3__xml__simulator.html#3f0a55e75371d09bb0c868f9b053ed81" title="Method for launching each simulation: it creates correct files, forks and the child...">run</a>(map&lt;string, string&gt; <a class="code" href="classm3__xml__simulator.html#fadec77b0544f73787a6f233c174e917">parameters</a>) <span class="keywordflow">throw</span>();
<a name="l00204"></a>00204                 map&lt;string, double&gt; <a class="code" href="classm3__xml__simulator.html#0a096ac1a3c555809696446b286035cb">get_metrics</a>();
<a name="l00205"></a>00205                 <span class="keywordtype">int</span> <a class="code" href="classm3__xml__simulator.html#08d683ee1d2c5fa1d5573e3d33c7ebb8">get_error_code</a>();
<a name="l00206"></a>00206                 <span class="keywordtype">string</span> <a class="code" href="classm3__xml__simulator.html#3e9649e4a0bd8fb2ca1280b2f4378db2">get_error_description</a>();
<a name="l00207"></a>00207                 map&lt;string, string&gt; <a class="code" href="classm3__xml__simulator.html#405dbe90673204b482afde371d860bf8">get_parameters</a>();
<a name="l00208"></a>00208                 <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="classm3__xml__simulator.html#e30d1e1d49215c779b64fa9001e7db4d">init</a>() <span class="keywordflow">throw</span>(<a class="code" href="classm3__xml__exception.html" title="This class defines the exception used in all objects of this driver; it accepts only...">m3_xml_exception</a>);
<a name="l00209"></a>00209                 <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="classm3__xml__simulator.html#0d44694991d82703dd8b5f490bd4a22b">shutdown</a>();
<a name="l00210"></a>00210         
<a name="l00211"></a>00211         <span class="keyword">private</span>:
<a name="l00212"></a><a class="code" href="classm3__xml__simulator.html#0f133a7abdaedd78dc91cd0aefa392bc">00212</a>                 xmlDocPtr <a class="code" href="classm3__xml__simulator.html#0f133a7abdaedd78dc91cd0aefa392bc">doc</a>;
<a name="l00213"></a><a class="code" href="classm3__xml__simulator.html#fadec77b0544f73787a6f233c174e917">00213</a>                 map&lt;string, string&gt; parameters;
<a name="l00214"></a><a class="code" href="classm3__xml__simulator.html#25520fb3c5a686d9c1a7e39f0207076b">00214</a>                 map&lt;string, double&gt; <a class="code" href="classm3__xml__simulator.html#25520fb3c5a686d9c1a7e39f0207076b">metrics</a>;
<a name="l00215"></a><a class="code" href="classm3__xml__simulator.html#11c05b5741ad8c90abf9f566d66abe66">00215</a>                 <span class="keywordtype">int</span> <a class="code" href="classm3__xml__simulator.html#11c05b5741ad8c90abf9f566d66abe66">error_code</a>;
<a name="l00216"></a><a class="code" href="classm3__xml__simulator.html#111e1a8d35eaec89637d981bca55f344">00216</a>                 <span class="keywordtype">string</span> <a class="code" href="classm3__xml__simulator.html#111e1a8d35eaec89637d981bca55f344">error_description</a>;
<a name="l00217"></a><a class="code" href="classm3__xml__simulator.html#3f96da1985ce0d68de46614db94f0848">00217</a>                 <span class="keywordtype">string</span> <a class="code" href="classm3__xml__simulator.html#3f96da1985ce0d68de46614db94f0848">simulator</a>;
<a name="l00218"></a><a class="code" href="classm3__xml__simulator.html#14ad24af75a0cb4b84c586f0d9eeb232">00218</a>                 <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classm3__xml__simulator.html#14ad24af75a0cb4b84c586f0d9eeb232">counter</a>;
<a name="l00219"></a><a class="code" href="classm3__xml__simulator.html#50d9e4c5d928c464d96b64e59d8fb1c6">00219</a>                 <span class="keyword">static</span> <span class="keywordtype">string</span> <a class="code" href="classm3__xml__simulator.html#50d9e4c5d928c464d96b64e59d8fb1c6">directory</a>;
<a name="l00220"></a>00220                 <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="classm3__xml__simulator.html#6f74a7b4f8935dc4b47225ec2758c056">del_element</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *);
<a name="l00221"></a>00221 };
<a name="l00222"></a>00222 
<a name="l00232"></a><a class="code" href="classm3__xml__validator.html">00232</a> <span class="keyword">class </span><a class="code" href="classm3__xml__validator.html" title="This singleton class offers two different XML Schema validators, one for each XML...">m3_xml_validator</a>
<a name="l00233"></a>00233 {
<a name="l00234"></a>00234         <span class="keyword">public</span>:
<a name="l00235"></a>00235                 <span class="keywordtype">bool</span> <a class="code" href="classm3__xml__validator.html#b905f62bc5e22c63b30c52d62e2b3ce4">validate</a>(xmlDocPtr doc);
<a name="l00236"></a>00236                 <span class="keyword">static</span> <a class="code" href="classm3__xml__validator.html" title="This singleton class offers two different XML Schema validators, one for each XML...">m3_xml_validator</a> *<a class="code" href="classm3__xml__validator.html#5b9dbb277ee418cbbac1263c61b96fca">get_design_space_validator</a>() <span class="keywordflow">throw</span>(<a class="code" href="classm3__xml__exception.html" title="This class defines the exception used in all objects of this driver; it accepts only...">m3_xml_exception</a>);
<a name="l00237"></a>00237                 <span class="keyword">static</span> <a class="code" href="classm3__xml__validator.html" title="This singleton class offers two different XML Schema validators, one for each XML...">m3_xml_validator</a> *<a class="code" href="classm3__xml__validator.html#a825066369442585b0b6284053990399">get_simulator_validator</a>() <span class="keywordflow">throw</span>(<a class="code" href="classm3__xml__exception.html" title="This class defines the exception used in all objects of this driver; it accepts only...">m3_xml_exception</a>);
<a name="l00238"></a>00238                 <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="classm3__xml__validator.html#f85c237599daa03c8800ce44aedd9279">shutdown</a>();
<a name="l00239"></a>00239                 <a class="code" href="classm3__xml__validator.html#846f878b0643922fefe5a98deca74bc9">~m3_xml_validator</a>();
<a name="l00240"></a><a class="code" href="classm3__xml__validator.html#3cacc7f783a6e240d2a086b1c5e06ff7">00240</a>                 <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">string</span> <a class="code" href="classm3__xml__validator.html#3cacc7f783a6e240d2a086b1c5e06ff7">design_space_schema</a>;
<a name="l00241"></a><a class="code" href="classm3__xml__validator.html#d0c1bf7168df86d72b3ed1b92ba65023">00241</a>         <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">string</span> <a class="code" href="classm3__xml__validator.html#d0c1bf7168df86d72b3ed1b92ba65023">simulator_schema</a>;
<a name="l00242"></a><a class="code" href="classm3__xml__validator.html#942e24480af9719fe302a18c2efd8f11">00242</a>         <span class="keywordtype">string</span> <a class="code" href="classm3__xml__validator.html#942e24480af9719fe302a18c2efd8f11">build_path</a>;
<a name="l00243"></a>00243         
<a name="l00244"></a>00244         <span class="keyword">private</span>:
<a name="l00245"></a>00245                 <a class="code" href="classm3__xml__validator.html#d13e1f42dd06798590cdf2bbe1e112ce">m3_xml_validator</a>(<span class="keywordtype">string</span>) throw(<a class="code" href="classm3__xml__exception.html" title="This class defines the exception used in all objects of this driver; it accepts only...">m3_xml_exception</a>);
<a name="l00246"></a><a class="code" href="classm3__xml__validator.html#55000ebaf151a579941b0f045cb48528">00246</a>                 static <a class="code" href="classm3__xml__validator.html" title="This singleton class offers two different XML Schema validators, one for each XML...">m3_xml_validator</a> *<a class="code" href="classm3__xml__validator.html#55000ebaf151a579941b0f045cb48528">design_space_validator</a>;
<a name="l00247"></a><a class="code" href="classm3__xml__validator.html#b1419037fff0e24121bc51deb3f93bb4">00247</a>                 static <a class="code" href="classm3__xml__validator.html" title="This singleton class offers two different XML Schema validators, one for each XML...">m3_xml_validator</a> *<a class="code" href="classm3__xml__validator.html#b1419037fff0e24121bc51deb3f93bb4">simulator_validator</a>;
<a name="l00248"></a><a class="code" href="classm3__xml__validator.html#95ab2325a4b7042d0068bec1af4317cf">00248</a>                 <span class="keywordtype">string</span> <a class="code" href="classm3__xml__validator.html#95ab2325a4b7042d0068bec1af4317cf">current_schema</a>;
<a name="l00249"></a><a class="code" href="classm3__xml__validator.html#d823948bde09fb1e19cb542a04bd295e">00249</a>                 xmlSchemaParserCtxtPtr <a class="code" href="classm3__xml__validator.html#d823948bde09fb1e19cb542a04bd295e">schema_context_run</a>;
<a name="l00250"></a><a class="code" href="classm3__xml__validator.html#349ac3ee528d6bdb044675a0a85ce7cd">00250</a>                 xmlSchemaValidCtxtPtr <a class="code" href="classm3__xml__validator.html#349ac3ee528d6bdb044675a0a85ce7cd">schema_valid_run</a>;
<a name="l00251"></a><a class="code" href="classm3__xml__validator.html#16e2795dc4e26f54b28c9f35946c44a9">00251</a>                 xmlSchemaPtr <a class="code" href="classm3__xml__validator.html#16e2795dc4e26f54b28c9f35946c44a9">schema_run</a>;
<a name="l00252"></a>00252 };
<a name="l00253"></a>00253 
<a name="l00261"></a><a class="code" href="classm3__xml__driver.html">00261</a> class <a class="code" href="classm3__xml__driver.html" title="This is the main driver class: it offers every method declared in the interface,...">m3_xml_driver</a>: public <a class="code" href="classm3__driver.html" title="Abstract driver definition.">m3_driver</a>
<a name="l00262"></a>00262 {
<a name="l00263"></a>00263         <span class="keyword">public</span>:
<a name="l00264"></a>00264         <span class="keywordtype">string</span> get_information();
<a name="l00280"></a>00280         <a class="code" href="classm3__point.html" title="The point derived from the object class.">m3_point</a> *simulate(<a class="code" href="classm3__point.html" title="The point derived from the object class.">m3_point</a>&amp; point, <a class="code" href="classm3__env.html" title="This class represent the environment of m3explorer.">m3_env</a> *env);
<a name="l00281"></a>00281         <span class="keywordtype">bool</span> is_valid(<a class="code" href="classm3__point.html" title="The point derived from the object class.">m3_point</a> &amp;, <a class="code" href="classm3__env.html" title="This class represent the environment of m3explorer.">m3_env</a> *);
<a name="l00282"></a>00282         <span class="keywordtype">string</span> get_name();
<a name="l00283"></a>00283         <a class="code" href="classm3__xml__driver.html" title="This is the main driver class: it offers every method declared in the interface,...">m3_xml_driver</a>() <span class="keywordflow">throw</span>(m3_xml_exception);
<a name="l00284"></a>00284         ~<a class="code" href="classm3__xml__driver.html" title="This is the main driver class: it offers every method declared in the interface,...">m3_xml_driver</a>();
<a name="l00285"></a>00285         <a class="code" href="classm3__design__space.html" title="This class represents the design space associated to the current use case.">m3_design_space</a> *get_design_space(<a class="code" href="classm3__env.html" title="This class represent the environment of m3explorer.">m3_env</a> *) <span class="keywordflow">throw</span>(m3_xml_exception);
<a name="l00286"></a>00286         <span class="keywordtype">string</span> get_point_representation(<a class="code" href="classm3__env.html" title="This class represent the environment of m3explorer.">m3_env</a> *, <a class="code" href="classm3__point.html" title="The point derived from the object class.">m3_point</a> *);
<a name="l00287"></a>00287         
<a name="l00288"></a>00288         <span class="keyword">private</span>:
<a name="l00289"></a><a class="code" href="classm3__xml__driver.html#d63f9e5ece4facee5d2566afa132411e">00289</a>         <a class="code" href="classm3__xml__simulator.html" title="This represents an instance of the simulator; there is no need to create a new object...">m3_xml_simulator</a> *simulator;
<a name="l00290"></a><a class="code" href="classm3__xml__driver.html#aa5e216a47293a19ddc05db09fff3316">00290</a>                 vector&lt;m3_xml_rule *&gt; rules;
<a name="l00291"></a>00291                 xmlDocPtr launch(<span class="keywordtype">string</span>, xmlDocPtr) throw(m3_xml_exception);
<a name="l00292"></a>00292 };
<a name="l00293"></a>00293 
<a name="l00294"></a><a class="code" href="libm3__xml__driver_8h.html#460e29c12c509c5f9ccd62f3efd3600b">00294</a> inline <span class="keywordtype">bool</span> <a class="code" href="libm3__xml__driver_8h.html#460e29c12c509c5f9ccd62f3efd3600b">is_exp2</a>(<span class="keywordtype">int</span> n)
<a name="l00295"></a>00295 {
<a name="l00296"></a>00296         <span class="keywordflow">if</span>(n&lt;1) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00297"></a>00297         <span class="keywordtype">float</span> exp2=log((<span class="keywordtype">double</span>)n)/log(2.0);
<a name="l00298"></a>00298         <span class="keywordtype">int</span> res=(int) pow((<span class="keywordtype">float</span>) 2, exp2);
<a name="l00299"></a>00299         <span class="keywordflow">return</span> n==res;
<a name="l00300"></a>00300 }
<a name="l00301"></a>00301 
<a name="l00302"></a><a class="code" href="libm3__xml__driver_8h.html#2b223cc2c5475f39ebc1745aabf102a3">00302</a> <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="libm3__xml__driver_8h.html#2b223cc2c5475f39ebc1745aabf102a3">contains</a>(<a class="code" href="classm3__vector.html" title="Vector class derived from object.">m3_vector</a> *v, <a class="code" href="classm3__string.html" title="The string class derived from object.">m3_string</a> str)
<a name="l00303"></a>00303 {
<a name="l00304"></a>00304         <a class="code" href="classm3__object.html" title="This class is the root of all the objects created within the shell.">m3_object</a> *obj;
<a name="l00305"></a>00305         
<a name="l00306"></a>00306         <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;v-&gt;<a class="code" href="classm3__vector.html#e3d02bd7f3bfa66428cdbe1839fe4b66" title="Returns the size of the vector.">size</a>(); ++i)
<a name="l00307"></a>00307         {
<a name="l00308"></a>00308                 *obj=v-&gt;<a class="code" href="classm3__vector.html#d3e785190b2c2b3c0aaadd489636a3e1" title="Returns a copy of the object to the specified position.">get</a>(i);
<a name="l00309"></a>00309                 <span class="keywordflow">if</span>(is_a&lt;m3_string *&gt;(obj))
<a name="l00310"></a>00310                 {
<a name="l00311"></a>00311                         <span class="keywordtype">string</span> str2=to&lt;m3_string *&gt;(obj)-&gt;get_string();
<a name="l00312"></a>00312                         <span class="keywordflow">if</span>(str2.compare(str.<a class="code" href="classm3__string.html#bba908092a6dd93ae6584b97e14ab89b">get_string</a>())==0)
<a name="l00313"></a>00313                         {
<a name="l00314"></a>00314                                 <span class="keywordflow">return</span> i;
<a name="l00315"></a>00315                         }
<a name="l00316"></a>00316                 }
<a name="l00317"></a>00317         }
<a name="l00318"></a>00318         <span class="keywordflow">return</span> -1;
<a name="l00319"></a>00319 }
<a name="l00320"></a>00320 
<a name="l00321"></a><a class="code" href="libm3__xml__driver_8h.html#c9feb6acad50bd071b87ab7cc73875b2">00321</a> <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="libm3__xml__driver_8h.html#c9feb6acad50bd071b87ab7cc73875b2">is_int</a>(<span class="keywordtype">string</span> constant)
<a name="l00322"></a>00322 {
<a name="l00323"></a>00323         ostringstream counterexample;
<a name="l00324"></a>00324         <span class="keywordtype">int</span> cvalue=atoi(constant.c_str());
<a name="l00325"></a>00325         counterexample &lt;&lt; cvalue;
<a name="l00326"></a>00326         <span class="keywordflow">if</span>(counterexample.str().compare(constant)==0) <span class="comment">// no errors in conversion, constant should be an integer</span>
<a name="l00327"></a>00327         {
<a name="l00328"></a>00328                 <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00329"></a>00329         }
<a name="l00330"></a>00330         <span class="keywordflow">else</span> <span class="comment">// conversion error, constant should be a string</span>
<a name="l00331"></a>00331         {
<a name="l00332"></a>00332                 <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00333"></a>00333         }
<a name="l00334"></a>00334 }
<a name="l00335"></a>00335 
<a name="l00336"></a><a class="code" href="libm3__xml__driver_8h.html#a361e7bf7f52af7c51de514aced178bf">00336</a> <span class="keyword">inline</span> <span class="keywordtype">string</span> <a class="code" href="libm3__xml__driver_8h.html#a361e7bf7f52af7c51de514aced178bf">to_string</a>(<span class="keywordtype">int</span> value)
<a name="l00337"></a>00337 {
<a name="l00338"></a>00338         ostringstream temp;
<a name="l00339"></a>00339         
<a name="l00340"></a>00340         temp &lt;&lt; value;
<a name="l00341"></a>00341         <span class="keywordflow">return</span> temp.str();
<a name="l00342"></a>00342 }
<a name="l00343"></a>00343 
<a name="l00344"></a>00344 <span class="comment">/*</span>
<a name="l00345"></a>00345 <span class="comment"> * Algorithm from http://oopweb.com/CPP/Documents/CPPHOWTO/Volume/C++Programming-HOWTO-7.html</span>
<a name="l00346"></a>00346 <span class="comment"> */</span>
<a name="l00347"></a><a class="code" href="libm3__xml__driver_8h.html#d531456b3e49200623240f9777553c8a">00347</a> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="libm3__xml__driver_8h.html#d531456b3e49200623240f9777553c8a">tokenize</a>(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; str, vector&lt;int&gt;&amp; tokens, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; delimiters = <span class="stringliteral">" "</span>)
<a name="l00348"></a>00348 {
<a name="l00349"></a>00349     <span class="comment">// Skip delimiters at beginning.</span>
<a name="l00350"></a>00350     string::size_type lastPos=str.find_first_not_of(delimiters, 0);
<a name="l00351"></a>00351     <span class="comment">// Find first "non-delimiter".</span>
<a name="l00352"></a>00352     string::size_type pos=str.find_first_of(delimiters, lastPos);
<a name="l00353"></a>00353 
<a name="l00354"></a>00354     <span class="keywordflow">while</span>(string::npos!=pos || string::npos!=lastPos)
<a name="l00355"></a>00355     {
<a name="l00356"></a>00356         <span class="comment">// Found a token, add it to the vector.</span>
<a name="l00357"></a>00357         tokens.push_back(atoi(str.substr(lastPos, pos-lastPos).c_str()));
<a name="l00358"></a>00358         <span class="comment">// Skip delimiters.  Note the "not_of"</span>
<a name="l00359"></a>00359         lastPos=str.find_first_not_of(delimiters, pos);
<a name="l00360"></a>00360         <span class="comment">// Find next "non-delimiter"</span>
<a name="l00361"></a>00361         pos=str.find_first_of(delimiters, lastPos);
<a name="l00362"></a>00362     }
<a name="l00363"></a>00363 }
<a name="l00364"></a>00364 
<a name="l00365"></a><a class="code" href="libm3__xml__driver_8h.html#f7d7ecc3e15a0b13dda3471c707e3d5e">00365</a> <span class="keyword">inline</span> vector&lt;int&gt; <a class="code" href="libm3__xml__driver_8h.html#f7d7ecc3e15a0b13dda3471c707e3d5e">get_elements_as_vector</a>(<span class="keywordtype">string</span> input)
<a name="l00366"></a>00366 {
<a name="l00367"></a>00367         vector&lt;int&gt; result;
<a name="l00368"></a>00368         
<a name="l00369"></a>00369         <a class="code" href="libm3__xml__driver_8h.html#d531456b3e49200623240f9777553c8a">tokenize</a>(input, result, <span class="stringliteral">"-"</span>);
<a name="l00370"></a>00370         
<a name="l00371"></a>00371         <span class="keywordflow">return</span> result;
<a name="l00372"></a>00372 }
<a name="l00373"></a>00373 
<a name="l00374"></a><a class="code" href="libm3__xml__driver_8h.html#cbfbfa5b56f70961858bc1d2bfae395f">00374</a> <span class="keyword">inline</span> <span class="keywordtype">string</span> <a class="code" href="libm3__xml__driver_8h.html#cbfbfa5b56f70961858bc1d2bfae395f">get_elements_as_string</a>(vector&lt;int&gt; input)
<a name="l00375"></a>00375 {
<a name="l00376"></a>00376         ostringstream result;
<a name="l00377"></a>00377         <span class="keywordtype">int</span> i;
<a name="l00378"></a>00378         
<a name="l00379"></a>00379         <span class="keywordflow">for</span>(i=0; i&lt;input.size(); ++i)
<a name="l00380"></a>00380         {
<a name="l00381"></a>00381                 <span class="keywordflow">if</span>(i&gt;0)
<a name="l00382"></a>00382                 {
<a name="l00383"></a>00383                         result &lt;&lt; <span class="stringliteral">"-"</span>;
<a name="l00384"></a>00384                 }
<a name="l00385"></a>00385                 result &lt;&lt; input[i];
<a name="l00386"></a>00386         }
<a name="l00387"></a>00387         
<a name="l00388"></a>00388         <span class="keywordflow">return</span> result.str();
<a name="l00389"></a>00389 }
<a name="l00390"></a>00390 
<a name="l00391"></a><a class="code" href="libm3__xml__driver_8h.html#927de40499d0ec6d3a0ba61b543a01ab">00391</a> <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="libm3__xml__driver_8h.html#927de40499d0ec6d3a0ba61b543a01ab">get_parameter_type</a>(vector&lt;m3_parameter&gt; <a class="code" href="m3__arg_8h.html#6b79187201229d72fdbe8806d889a31c">parameters</a>, <span class="keywordtype">string</span> name)
<a name="l00392"></a>00392 {
<a name="l00393"></a>00393         <span class="keywordtype">int</span> i;
<a name="l00394"></a>00394         
<a name="l00395"></a>00395         <span class="keywordflow">for</span>(i=0; i&lt;parameters.size(); ++i)
<a name="l00396"></a>00396         {
<a name="l00397"></a>00397                 <span class="keywordflow">if</span>(parameters[i].name.compare(name)==0)
<a name="l00398"></a>00398                 {
<a name="l00399"></a>00399                         <span class="keywordflow">return</span> parameters[i].type;
<a name="l00400"></a>00400                 }
<a name="l00401"></a>00401         }
<a name="l00402"></a>00402 }
<a name="l00403"></a>00403 
<a name="l00404"></a>00404 <span class="preprocessor">#endif </span><span class="comment">/*LIBM3_XML_DRIVER_H_*/</span>
</pre></div></div>
<hr size="1"><address style="text-align: right;"><small>Generated on Tue Nov 16 16:18:46 2010 for M3Explorer by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.5 </small></address>
</body>
</html>

//==========================================================================
//	uc_cpu_class.cpp
//	Author: David Quijano, Juan Castillo, HÃ©ctor Posadas
//	Date: mar oct 30 2007
//	Description:
//==========================================================================
//  The following code is derived, directly or indirectly, from PERFidiX,
//  released June 30, 2006. Copyright (C) 2006 Design of Systems on Silicon(DS2)
//  The Initial Developer of the Original Code is the University of Cantabria
//  for Design of Systems on Silicon (DS2)
//
//  This program is free software; you can redistribute it and/or modify
//  it under the terms of the GNU General Public License (GPL) or GNU Lesser General Public License(LGPL) as published by
//  the Free Software Foundation; either version 2 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License (GPL) or GNU Lesser General Public License(LGPL) for more details.
//
//  You should have received a copy of the GNU General Public License (GPL) or GNU Lesser General Public License(LGPL)
//  along with this program; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  For more information about SCope you can visit
//  http://www.teisa.unican.es/scope or write an e-mail to
//  scope@teisa.unican.es or a letter to SCope, GIM - TEISA, University
//  of Cantabria, AV. Los Castros s/n, ETSIIT, 39005, Santander, Spain
//==========================================================================

#include "stdarg.h"
#include "uc_cpu_class.h"
#include "uc_os_defines.h"
#include "uc_interrupt_info_class.h"
#include "uc_posix_c.h"

extern __thread UC_rtos_class *qt_parent_rtos;
extern __thread UC_process_class *qt_parent_process;

// Used in UC_cpu_class::init.
// Connects the scheduler and interrupt management of the DIC real-time extension to the standard scheduler.
#ifdef DIC_RTLINUX
	UC_thread_class *dic_schedule(UC_rtos_class *m_parent_rtos, UC_cpu_class* cpu);
	void * dic_interruption_thread(void * void_cpu);
	bool dic_check_interrupt(int irq, UC_rtos_class *parent_rtos);
#endif

/**
 * \brief Constructor
 *
 * \param module_name module name for SystemC
 * \param rtos Pointer to its parent rtos
 * \param id CPU number identifier
 */
UC_cpu_class::UC_cpu_class(sc_module_name module_name, UC_rtos_class *rtos, int id) : sc_module(module_name)
{
	m_parent_rtos = rtos;
	m_id = id;
	m_idle_process = new UC_process_class(m_parent_rtos);
	m_idle_task = new UC_task_class(m_idle_process);
	m_statistics = new UC_statistics_class();
	m_current_task = m_idle_task;
	m_HAL_function_id = -1;
	m_HAL_arg_stack = malloc(MAX_HAL_ARGS_SIZE);
	m_HAL_return = malloc(MAX_HAL_RETURN_SIZE);
	m_active_interruptions = 0;
	m_irq_enabled = false;
	m_preemtive_thread = NULL;
	m_icache = new UC_icache_class(16384, 64, 8, 4);

	SC_HAS_PROCESS(UC_cpu_class);

	SC_THREAD(init);
}


UC_cpu_class::~UC_cpu_class()
{
	cout << name() << " " << endl;
	m_statistics->print_statistics();
	cout << "\tInstruction cache misses: " << m_icache->m_total_misses << endl;
	delete m_icache;
}

/**
 * \brief Creates a list of functions to execute
 *
 * Inserts the new function into the list of new processes to be executed when
 * the simulation starts
 * \param function The function to be inserted into the list
 * \param args The arguments to be inserted into the list
 */
void UC_cpu_class::new_process(void* (*function)(void *), void *args)
{
	m_new_function_list.push_back(function);
	m_new_function_args_list.push_back(args);
}

/**
 * \brief Creates the list of new processes, performs the reschedule/SystemC annotation loop
 *
 * This SC_THREAD executes the list of processes inserted before the simulation
 * starts in the correspondent processor. It creates and initializes the process
 * and thread members.\n
 * Then, it executes a loop with the reschedule and the time annotation functions.\n
 * If the current thread has initialized the bus access protocol, loading the
 * m_HAL_function_id the m_HAL_arg_stack variables, the cpu executes the correspondent
 * HAL function.
 */
void UC_cpu_class::init()
{
	m_interruptions_process = new UC_process_class(m_parent_rtos);
	m_parent_rtos->m_process_list.push_back(m_interruptions_process);
	m_interruptions_process->m_cpu_mask = (1 << m_id);
	m_interruptions_process->m_nice = -1000;

	m_interruptions_task = m_parent_rtos->POSIX->uc_pthread_create(m_interruptions_process, interruption_handler, (void*)this);
	m_interruptions_thread = m_interruptions_task->m_thread_list[0];
	pthread_mutex_lock(&m_parent_rtos->m_rtos_mutex);

#ifdef DIC_RTLINUX
	m_dic_interruptions_process = new UC_process_class(m_parent_rtos);
	m_parent_rtos->m_process_list.push_back(m_dic_interruptions_process);
	m_dic_interruptions_process->m_cpu_mask = (1 << m_id);
	m_dic_interruptions_process->m_nice = -1101;

	m_dic_interruptions_task = m_parent_rtos->POSIX->uc_pthread_create(m_dic_interruptions_process, dic_interruption_thread, (void*)this);
	m_dic_interruptions_thread = m_dic_interruptions_task->m_thread_list[0];
	pthread_mutex_lock(&m_parent_rtos->m_rtos_mutex);
#endif

	UC_process_class *process;
	for (int i = 0; i < m_new_function_list.size(); i++) {
		process = new UC_process_class(m_parent_rtos);
		process->m_pid = m_parent_rtos->m_last_pid++;
		m_parent_rtos->m_process_list.push_back(process);
		process->m_cpu_mask = (1 << m_id);

		UC_task_class *task = m_parent_rtos->POSIX->uc_pthread_create(process, m_new_function_list[i], m_new_function_args_list[i]);
		pthread_mutex_lock(&m_parent_rtos->m_rtos_mutex);
	}

	UC_thread_class *thread = NULL;
	while (true) {

// Used when  the DIC real-time extension is activated.
// Checks if a real-time task has to be executed.
// Otherwise continues with normal execution
#ifdef DIC_RTLINUX
		thread = dic_schedule(m_parent_rtos,this);

		if (thread == NULL) {
			thread = m_parent_rtos->m_task_scheduler->reschedule(this);
		}
#else
		thread = m_parent_rtos->m_task_scheduler->reschedule(this);
#endif

		if (thread != NULL) { // (thread == NULL) ==> Idle task scheduled
			if (thread->m_parser_time == 0) {
				pthread_mutex_unlock(&thread->m_parent_task->m_parent_process->m_process_mutex);
				pthread_mutex_lock(&m_parent_rtos->m_rtos_mutex);
			}
			wait_time(thread);
			if (m_HAL_function_id != -1) {
				execute_HAL_function();
				m_HAL_function_id = -1;
			}
		}
		else {
			wait(m_resume_cpu);
		}
	}
}

/**
 * \brief Waits an specify time or until an interruption is raised and updates the time variables
 *
 * \param thread A pointer to the thread that has to wait
 */
void UC_cpu_class::wait_time(UC_thread_class *thread) {
	float percent = 0.0; //Using a time percent for instructions equivalency
	// Annotates the initial time
	unsigned long long initial_time = sc_time_stamp().value() / 1000;

	unsigned long long total_time = thread->m_switches_time + thread->m_parser_time;
	unsigned long long total_instr = thread->m_parser_instr;
	// Waits the switches time
	wait(total_time, SC_NS, m_resume_cpu);

	// Gets the running time and updates the time variables
	unsigned long long running_time = sc_time_stamp().value() / 1000 - initial_time;
	if (total_time != 0) {
		percent = (float)running_time / (float)total_time;
	}
	unsigned long long running_instr = (long long)((float)total_instr * percent);
	m_statistics->m_running_time += running_time;
	m_statistics->m_num_instr += running_instr;
	thread->m_parser_time = total_time - running_time;
	thread->m_parser_instr = total_instr - running_instr;
	thread->m_switches_time = 0;

	if (thread->m_parser_time == 0) {
		thread->update_state();
	}
}

/**
 * \brief Creates the stack to access to the bus
 *
 * Stores the function identifier and creates the stack for arguments. The cpu checks that
 * the identifier is not -1 and execute the HAL function. \n
 * This function is executed by the user code in a transparent way for the user.
 * \param function_id The identifier of the function
 * \param ... The parameters of the HAL's function
 * \return
 */
void * /*UC_cpu_class::*/HAL_stack_creation(int function_id, ...) {
// 	UC_rtos_class *foo_rtos = qt_parent_rtos;
// 	UC_process_class *foo_process = qt_parent_process;
// 	UC_thread_class *thread = (*qt_parent_rtos)[qt_parent_process->m_cpu]->m_current_task->m_current_thread;
// 	thread->set_next_state(USER, SUPER_USER);
// 	thread->update_state();
// 	stp_yield();

	UC_cpu_class *cpu = (*qt_parent_rtos)[qt_parent_process->m_cpu];

	va_list arg_list;
	va_start(arg_list, function_id);

	cpu->m_HAL_function_id = function_id;
	int *local_stack = (int*)cpu->m_HAL_arg_stack;

	for (int arg_cont = 0; arg_cont < 30; arg_cont++) {
		local_stack[arg_cont] = va_arg(arg_list, int);
	}

// 	int arg_cont = 0;
// 	while ((local_stack[arg_cont] = va_arg(arg_list, int)) != 0) {
// 		arg_cont++;
// 	}

// 	stp_yield();

	va_end(arg_list);

// 	thread->set_next_state(SUPER_USER, WAITING);
	stp_yield();

	return cpu->m_HAL_return;
}

/**
 * \brief Actives the execution of an interruption
 *
 * \param irq The irq to raise
 */
void UC_cpu_class::raise_irq(int irq) {
	unsigned short irq_shift = (1 << irq);
	m_active_interruptions |= irq_shift;

#ifdef DIC_RTLINUX
	if(dic_check_interrupt(irq,m_parent_rtos)){
		// Interruptions enabled and not masked
		if ( (m_irq_enabled == true) && ((~m_irq_mask.current_mask() & irq_shift) > 0) ) {
			m_dic_interruptions_thread->set_next_state(BLOCKED, READY);
			m_dic_interruptions_thread->update_state();
			m_resume_cpu.notify(SC_ZERO_TIME);
		}
		return;
	}
#endif

	// Interruptions enabled and not masked
	if ( (m_irq_enabled == true) && ((~m_irq_mask.current_mask() & irq_shift) > 0) ) {
		m_interruptions_thread->set_next_state(BLOCKED, READY);
		m_interruptions_thread->update_state();
		m_resume_cpu.notify(SC_ZERO_TIME);
	}
}

/**
 * \brief Handles the raised interruptions
 */
void * UC_cpu_class::interruption_handler(void * void_cpu) {
	char name[10];
	UC_cpu_class *cpu = (UC_cpu_class *)void_cpu;
	UC_thread_class *thread = cpu->m_interruptions_thread;
	cpu->m_irq_enabled = true;
	thread->set_next_state(USER, SUPER_USER);
	thread->update_state();

	/**** BOOT ****/
	if (cpu->m_id == 0) {
		cpu->m_parent_rtos->init_MicroCOS();
		cpu->m_parent_rtos->init_modules();
	}

	while (true) {
		thread->set_next_state(SUPER_USER, BLOCKED);
		thread->update_state(); // fix from DS2 feedback
		stp_yield();

		// Interruptions not enabled or masked
		if ( (cpu->m_irq_enabled == false) || ((~cpu->m_irq_mask.current_mask() & cpu->m_active_interruptions) == 0) ) {
			continue;
		}

		// Gets the interruption number
		unsigned short highest_interruption = cpu->m_active_interruptions;
		int interruption = 0;
		while (highest_interruption != 1) {
			highest_interruption >>= 1;
			interruption++;
		}
// 		cout << "IRQ" << interruption << endl;

		// Checks if there is an interruption handler loaded for this interruption
		if (cpu->m_parent_rtos->m_idt[interruption].m_handler == NULL) {
			cout << "Interruption " << interruption << " not managed, ";
			cout << "processor: " << cpu->m_id << ", time: " << sc_time_stamp() << endl;
			continue;
		}

		// Creates the needed class to call the interruption
		UC_interrupt_info_class *info = new UC_interrupt_info_class();
		*info = cpu->m_parent_rtos->m_idt[interruption];
		info->m_irq = interruption;
		info->m_cpu = cpu;

		// The last pid must not be change
		int max_pid = cpu->m_parent_rtos->m_last_pid;
		cpu->m_parent_rtos->m_last_pid = 0xffffffff;

		cpu->m_interruptions_process->m_cpu = cpu->m_id;
		// Creates the thread in the interruption task

		sprintf(name, "IRQ %d", interruption);
		UC_thread_class *new_thread = cpu->m_parent_rtos->POSIX->uc_create_thread(cpu->m_interruptions_task, NULL, interrupt_wrapper, (void*)info, (char*)name);

		int pid = qt_parent_process->m_pid;

		// Reloads the last pid
		cpu->m_parent_rtos->m_last_pid = max_pid;

		// The thread's priority is set depending on the interruption number
		new_thread->m_attribs.schedparam.sched_priority = -50 * interruption;
	}
	return NULL;
}

/**
 * \brief Executes the desired interruption's handler and controls the interruptions' mask
 *
 * \param data A struct with the needed parameters
 * \return The handler's return parameter
 */
void * UC_cpu_class::interrupt_wrapper(void *data) {
	void * return_pointer;
	UC_interrupt_info_class info = *(UC_interrupt_info_class *)data;

	delete (UC_interrupt_info_class *)data;

	info.m_cpu->m_irq_mask.next_mask(1 << info.m_irq);
	return_pointer = (void*)info.m_handler(info.m_irq, info.m_args, info.m_regs);

	// Clear the interruption bit
	info.m_cpu->m_active_interruptions &= ~(1 << info.m_irq);

	info.m_cpu->m_irq_mask.previous_mask();

	if ((~info.m_cpu->m_irq_mask.current_mask() & info.m_cpu->m_active_interruptions) != 0) {
		info.m_cpu->m_interruptions_thread->set_next_state(BLOCKED, READY);
		info.m_cpu->m_interruptions_thread->update_state();
	}

	return return_pointer;
}

cpu_statistics UC_cpu_class::get_statistics() {
	cpu_statistics stats;
	stats.running_time = m_statistics->m_running_time;
	stats.instructions = m_statistics->m_num_instr;
	stats.instruction_misses = m_icache->m_total_misses;
	stats.data_misses = 0;
	return stats;
}
